name: Create Release Tag

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Enter Release Version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create_release_tag:
    runs-on: ubuntu-latest

    steps:
    # checkout the repo
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # fetch full history

    # generate release notes
    - name: Generate Release Notes
      run: |
        previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "initial commit") # get the most recent tag
        echo "Previous tag: ${previous_tag}"
        
        # check if a previous tag was found or if this is the first release
        if [ "${previous_tag}" = "initial commit" ]; then
          echo "No previous tag found. Generating release notes from the beginning of the repository."
          # get all commit messages from the beginning
          git log --pretty=format:"* %s" > release_notes.txt
        else
          echo "Generating release notes from ${previous_tag} to HEAD."
          # get commit messages between the previous tag and the current commit
          git log ${previous_tag}..HEAD --pretty=format:"* %s" > release_notes.txt
        fi
        
        # show the generated release notes
        echo "Generated Release Notes:"
        cat release_notes.txt

    # publish the generated release notes as an artifact
    - name: Publish Release Notes Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.txt

    # create and push the git tag using the release version
    - name: Checkout Branch, Create and Push Git Tag
      run: |
        git checkout ${{ github.ref_name }} # switch to the branch that triggered the build to avoid a detached head
        echo "Creating release tag: ${{ github.event.inputs.releaseVersion }}"
        git tag ${{ github.event.inputs.releaseVersion }} # create a new tag with the release version provided
        echo "Pushing release tag: ${{ github.event.inputs.releaseVersion }}"
<<<<<<< HEAD
<<<<<<< HEAD
        git push origin ${{ github.event.inputs.releaseVersion }} # push the new tag to remote
=======
        git push origin ${{ github.event.inputs.releaseVersion }} # push the new tag to remote
>>>>>>> refs/tags/red
=======
        git push origin ${{ github.event.inputs.releaseVersion }} # push the new tag to remote
>>>>>>> refs/tags/purple
